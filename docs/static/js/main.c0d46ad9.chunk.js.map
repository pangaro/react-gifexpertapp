{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGKI,MAAOF,GAHZ,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAEC,GACrB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QAVrB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECJwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WACPxB,EAAUC,GACLwB,MAAM,SAAEC,GACLH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAEEqB,EDb0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAarB,OACI,qCACI,qBAAIJ,UAAU,6CAAd,cAA8DhB,EAA9D,OAEEoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAESH,EAAOJ,KAAK,SAAEC,GAAF,OACb,cAAC,EAAD,eAESA,GADCA,EAAIC,aEanBgB,EAnCM,SAAAC,GAIjB,MAAoC1C,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MClBlC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c0d46ad9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n  \r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        //console.log('submit hecho');\r\n\r\n        if(inputValue.trim().length > 2){ \r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />    \r\n        </form>          \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = { \r\n    setCategories: PropTypes.func.isRequired\r\n} ","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=KZTU5vULeqpKNNJz7020tMdWHLvP50ZY`;   \r\n    const respuesta = await fetch( url );\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map( ( img ) => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    //console.log({id, title, url})\r\n    return (\r\n        <div className=\"card animate__animated animate__swing\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    //console.log(state);\r\n/*\r\n    const [images, setimages] = useState([]);\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( setimages );\r\n            //.then( ( imgs ) => setimages( imgs ) );\r\n    }, [ category ]);\r\n*/\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__swing__delay-2s\"> { category } </h3>\r\n\r\n            { loading && <p>Loading...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                     images.map( ( img ) => (\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img } /> \r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs ( category )\r\n            .then( ( imgs ) => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }, [ category ]);\r\n\r\n    return state; // { data: [], loading:true }\r\n}\r\n","\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = props => {\r\n\r\n    //const categories = [ 'pepe', 'pepa', 'pipa' ];\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    /*const handleAdd = (e) => {\r\n        //setCategories( [...categories, 'uno mas'] );\r\n        setCategories( cats => [...categories, 'uno mas'] );\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                        //<li key={ category }> { category } </li>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n/*GifExpertApp.propTypes = {\r\n\r\n}*/\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}